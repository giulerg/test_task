Задание 1

1)
select * from items  
join ( select item_id, max(update_date) as update_date 
  from items
  WHERE update_date >= '2020-06-01'
  group by item_id) as actual 
on items.item_id = actual.item_id 
and items.update_date = actual.update_date


2)
select * from items  
join  (
  select item_id, max(update_date) as update_date 
  from items
  WHERE price >= 3
  group by item_id
) as actual 
on items.item_id = actual.item_id 
and items.update_date = actual.update_date

3)
select 
  sum(price) 
from 
  (
    select 
      items.item_id, items.name,  items.price, items.update_date, orders.order_date, 
      ROW_NUMBER() over (
        partition by items.item_id,  order_id order by update_date desc) as n, 
      orders.order_id 
    from 
      items 
      join orders on items.item_id = orders.item_id 
    where user_id = 1 and order_date >= update_date
  ) 
where n = 1

4)
select 
  sum(price) 
from 
  (
    select 
      items.item_id, items.name,  items.price, items.update_date, orders.order_date, 
      ROW_NUMBER() over (
        partition by items.item_id,  order_id order by update_date desc) as n, 
      orders.order_id 
    from 
      items 
      join orders on items.item_id = orders.item_id 
    where  order_date<='2020-05-01' and order_date >= update_date
  ) 
where n = 1

5)
select 
   EXTRACT(quarter from order_date   ) as quarter, 
   FLOOR(avg(price))  as avg_price,
   sum(price) as sum_price
from 
  (
    select 
       items.price,   orders.order_date, 
      ROW_NUMBER() over (
        partition by items.item_id,  order_id order by update_date desc) as n 
    from 
      items 
      join orders on items.item_id = orders.item_id 
    where  order_date >= update_date
  ) 
where n = 1
group by quarter

6) 
Для оптимизации запросов необходимо выполнить следующие шаги:
1) Посмотреть план запроса. В нем можно увидеть,как происходит запрос,  какие индексы используются и какова величина COST для каждого шага
2) Добавить индексы на часто используемые поля
3) Использовать фильтрацию при поиске в таблице
4) Возвращать не всю таблицу, а часть с помощью LIMIT

Задание 2

1-2) При помощи использования хабов, саттелитов, линков. 
Каждой сущности orders, users, items необходимо выделить хаб (таблицу с id элемента)
Основную информацию о сущности заносим в саттелит (таблица с историей изменений основной информации элемента)
Линки же хранят информацию о связях между элементами и дату связей этих элементов

Т.о. получаются таблицы
hub_orders (id, created_at)
hub_users (id, created_at)
hub_items(id, created_at)

satellit_orders (id, order_id, created_at, **остальные доп. поля)
satellit_items (id, item_id, created_at, **остальные доп. поля (price и т.д.)
satellit_users (id, user_id, created_at, **остальные доп. поля (name и т.д.)

link_order_item (id, order_id, item_id, created_at) - таблица связи заказа и товара
link_user_order (id, user_id, order_id, created_at) - таблица связи покупателя и заказа

3) Можно использовать для этого pit-таблицы, которые в определенные промежутки времени, джобами сохраняют у себя актуальные данные с таблиц по дате добавления. И для извлечения актуальных данных можно будет обращаться к этой таблице
Н-р: 
pit_orders (id, order_id, item_id, last_price, created_at)

